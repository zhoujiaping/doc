/**
36. 有效的数独
判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。

数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。


上图是一个部分填充的有效的数独。

数独部分空格内已填入了数字，空白格用 '.' 表示。

示例 1:

输入:
[
  ["5","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: true
示例 2:

输入:
[
  ["8","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: false
解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
说明:

一个有效的数独（部分已被填充）不一定是可解的。
只需要根据以上规则，验证已经填入的数字是否有效即可。
给定数独序列只包含数字 1-9 和字符 '.' 。
给定数独永远是 9x9 形式的。

回溯算法
 * @param {character[][]} board
 * @return {boolean}
 */
var isValidSudoku = function(board) {
    let rotate = [[],[],[],[],[],[],[],[],[]]
    let block = [[],[],[],[],[],[],[],[],[]]
    let k=0
    for(let i=0;i<9;i++){
        for(let j=0;j<9;j++){
            rotate[j][i] = board[i][j]
            k = blockNum(i,j)
            block[k].push(board[i][j])
        }
    }
    //console.table(rotate)
    //console.table(block)
	  for(let i=0;i<9;i++){
	    for(let j=0;j<9;j++){
          if(board[i][j]=='.'){
            continue
          }
	        k = blockNum(i,j)
	        if(board[i].some((it,j0)=>j!=j0&&it==board[i][j])
            ||rotate[j].some((it,i0)=>i!=i0&&it==board[i][j])
            ||block[k].some((it,n)=>i!=knToI(k,n)&&j!=knToJ(k,n)&&it==board[i][j])){
	            return false
	        }
	    }
	  }
	  return true
};
function blockNum(i,j){
  return ((i/3)|0)*3+((j/3)|0)
}
function knToI(k,n){
  return (k/3|0)*3+(n/3|0)
}
function knToJ(k,n){
  return (k%3)*3+n%3
}
let board = [
              ["5","3",".",".","7",".",".",".","."],
              ["6",".",".","1","9","5",".",".","."],
              [".","9","8",".",".",".",".","6","."],
              ["8",".",".",".","6",".",".",".","3"],
              ["4",".",".","8",".","3",".",".","1"],
              ["7",".",".",".","2",".",".",".","6"],
              [".","6",".",".",".",".","2","8","."],
              [".",".",".","4","1","9",".",".","5"],
              [".",".",".",".","8",".",".","7","9"]
            ]
board = [
  ["8","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
console.info(isValidSudoku(board))